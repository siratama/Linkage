// Generated by Haxe 3.3.0
(function () { "use strict";
var ExtensionIndex = function() {
	this.LINKAGE_CANSEL_JSFL = "LinkageCancel.jsfl";
	this.LINKAGE_JSFL = "Linkage.jsfl";
	window.addEventListener("load",$bind(this,this.initialize));
};
ExtensionIndex.main = function() {
	new ExtensionIndex();
};
ExtensionIndex.prototype = {
	initialize: function(event) {
		var _gthis = this;
		this.csInterfaceUtil = flash_$extension_csinterface_CSInterfaceUtil.create();
		$("#add").mousedown(function(event1) {
			_gthis.runJsfl(_gthis.LINKAGE_JSFL);
		});
		$("#remove").mousedown(function(event2) {
			_gthis.runJsfl(_gthis.LINKAGE_CANSEL_JSFL);
		});
	}
	,runJsfl: function(jsfl) {
		this.csInterfaceUtil.runJsflScript(this.csInterfaceUtil.getExtensionUri() + "/" + jsfl);
	}
};
var flash_$extension_csinterface_CSInterfaceUtil = function(csInterface) {
	this.csInterface = csInterface;
};
flash_$extension_csinterface_CSInterfaceUtil.create = function() {
	return new flash_$extension_csinterface_CSInterfaceUtil(new CSInterface());
};
flash_$extension_csinterface_CSInterfaceUtil.prototype = {
	runJsflScript: function(jsflUri) {
		this.csInterface.evalScript("fl.runScript(\"" + jsflUri + "\")");
	}
	,flTrace: function(text) {
		this.csInterface.evalScript("fl.trace(\"" + text + "\")");
	}
	,getExtensionUri: function() {
		return "file:///" + this.csInterface.getSystemPath(SystemPath.EXTENSION);
	}
	,evalScript: function(script,callback) {
		this.csInterface.evalScript(script,callback);
	}
	,addDataToDocument: function(key,dataType,data) {
		this.csInterface.evalScript("document.addDataToDocument(\"" + key + "\", \"" + dataType + "\", \"" + data + "\");");
	}
	,getDataFromDocument: function(key,callback) {
		this.csInterface.evalScript("document.getDataFromDocument(\"" + key + "\");",callback);
	}
	,addEventListener: function(eventType,callbackCode,callback) {
		this.csInterface.evalScript("fl.addEventListener(\"" + eventType + "\", function(){ " + callbackCode + " });",callback);
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
ExtensionIndex.main();
})();
