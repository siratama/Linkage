// Generated by Haxe 3.3.0
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var LinkageCancel = function() {
	if(jsfl_Lib.fl.getDocumentDOM() == null) {
		return;
	}
	jsfl_Lib.fl.trace("---");
	var items = jsfl_Lib.fl.getDocumentDOM().library.getSelectedItems();
	var itemsLength = items.length;
	if(itemsLength == 0) {
		jsfl_Lib.fl.trace("Select item in library.");
		return;
	}
	var _g1 = 0;
	while(_g1 < itemsLength) {
		var item = items[_g1++];
		if(item.itemType == "folder") {
			continue;
		}
		if(item.linkageClassName != null) {
			item.linkageClassName = "";
		}
		item.linkageExportForAS = false;
	}
	jsfl_Lib.fl.trace("finish");
};
LinkageCancel.__name__ = true;
LinkageCancel.main = function() {
	new LinkageCancel();
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var jsfl_Lib = function() { };
jsfl_Lib.__name__ = true;
jsfl_Lib.alert = function(alertText) {
	alert(alertText);
};
jsfl_Lib.confirm = function(strAlert) {
	return confirm(strAlert);
};
jsfl_Lib.prompt = function(promptMsg,text) {
	if(text == null) {
		text = "";
	}
	return prompt(promptMsg,text);
};
jsfl_Lib.throwError = function(object,posInfos) {
	jsfl_Lib.fl.trace("Error : " + Std.string(object) + " at " + posInfos.methodName + "[" + posInfos.fileName + ":" + posInfos.lineNumber + "]");
	throw js__$Boot_HaxeError.wrap(object);
};
String.__name__ = true;
Array.__name__ = true;
jsfl_Lib.fl = fl;
LinkageCancel.main();
})();
